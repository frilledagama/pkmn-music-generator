# -*- coding: utf-8 -*-
"""pkmn-music-generation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rHUJY2QuTXEzygwXwG_U-hfOHtsoc947

Hello this is me testing out Google Magenta's PolyphonyRNN on pokemon music
"""

#@test {"output": "ignore"}
print('Installing dependencies...')
!apt-get update -qq && apt-get install -qq libfluidsynth1 fluid-soundfont-gm build-essential libasound2-dev libjack-dev
!pip install -qU pyfluidsynth pretty_midi

!pip install -qU magenta

# Hack to allow python to pick up the newly-installed fluidsynth lib. 
# This is only needed for the hosted Colab environment.
import ctypes.util
orig_ctypes_util_find_library = ctypes.util.find_library
def proxy_find_library(lib):
  if lib == 'fluidsynth':
    return 'libfluidsynth.so.1'
  else:
    return orig_ctypes_util_find_library(lib)
ctypes.util.find_library = proxy_find_library

print('Importing libraries and defining some helper functions...')
from google.colab import files

import magenta
import note_seq
import tensorflow

print('Finished')
print(magenta.__version__)
print(tensorflow.__version__)

#drive authorization
from google.colab import drive
drive.mount('/content/gdrive')
!ln -s "/content/gdrive/My Drive" "/content/mydrive"

import os
os.chdir("/content/mydrive/MAIS202/Project")
#hmod 755 ./scripts/run_local.sh
#!./scripts/run_local.sh nets/resnet_at_cifar10_run.py

# Commented out IPython magic to ensure Python compatibility.
# Load the TensorBoard notebook extension
# %load_ext tensorboard

from google.colab import files
import numpy as np
import os
import tensorflow as tf
import datetime
import magenta.music as mm
import magenta
from magenta.scripts import convert_dir_to_note_sequences
from magenta.models.polyphony_rnn import *

#Create NoteSeq from MIDI files

#Create Seq from NoteSeq file

#Train the model

!polyphony_rnn_train \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1 \
--sequence_example_file=/content/mydrive/MAIS202/Project/data/training_poly_tracks.tfrecord \
--num_training_steps=20000 \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--config='polyphony' \
--num_checkpoints=10

#evaluation?
!polyphony_rnn_train \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1 \
--sequence_example_file=/content/mydrive/MAIS202/Project/data/eval_poly_tracks.tfrecord \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--num_training_steps=20000
--eval

#Save your model as a bundle
!polyphony_rnn_generate \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1 \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--bundle_file=/content/mydrive/MAIS202/Project/polyphony/run1/my_poly_rnn.mag \
--config='polyphony' \
--save_generator_bundle

# Commented out IPython magic to ensure Python compatibility.
# Clear any logs from previous runs
#!rm -rf ./logs/

#run tensorboard
# %tensorboard \
--logdir=/content/mydrive/MAIS202/Project/polyphony \
--host=127.0.0.1

"""# Generate from a checkpoint."""

#generate new track with the trained model from a sequence of notes
!polyphony_rnn_generate \
--config='polyphony' \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1 \
--output_dir=/content/mydrive/MAIS202/Project/polyphony/run1/output \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--num_outputs=10 \
--num_steps=240 \
--primer_melody="[57]" \
--condition_on_primer=true \
--inject_primer_during_generation=false

#Choose your own MIDI file
primer_midi=("/content/mydrive/MAIS202/Project/data/primer_rt209n_2.mid")
primer_ns=mm.midi_file_to_note_sequence(primer_midi)
mm.plot_sequence(primer_ns)

#generate new track with the trained model from a midi

#cynthia
!polyphony_rnn_generate \
--config='polyphony' \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1/ \
--output_dir=/content/mydrive/MAIS202/Project/polyphony/run1/output/cynthia \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--num_outputs=5 \
--num_steps=240 \
--primer_midi=/content/mydrive/MAIS202/Project/data/primer_cynthia.mid \
--condition_on_primer=true \
--inject_primer_during_generation=false

#pkss
!polyphony_rnn_generate \
--config='polyphony' \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1/ \
--output_dir=/content/mydrive/MAIS202/Project/polyphony/run1/output/pkss \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--num_outputs=5 \
--num_steps=240 \
--primer_midi=/content/mydrive/MAIS202/Project/data/primer_pkss.mid \
--condition_on_primer=true \
--inject_primer_during_generation=false

#N
!polyphony_rnn_generate \
--config='polyphony' \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1/ \
--output_dir=/content/mydrive/MAIS202/Project/polyphony/run1/output/n \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--num_outputs=5 \
--num_steps=240 \
--primer_midi=/content/mydrive/MAIS202/Project/data/primer_enctr_n.mid \
--condition_on_primer=true \
--inject_primer_during_generation=false

#driftveil
!polyphony_rnn_generate \
--config='polyphony' \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1/ \
--output_dir=/content/mydrive/MAIS202/Project/polyphony/run1/output/driftveil \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--num_outputs=5 \
--num_steps=240 \
--primer_midi=/content/mydrive/MAIS202/Project/data/primer_driftveil.mid \
--condition_on_primer=true \
--inject_primer_during_generation=false

#pkmncenter
!polyphony_rnn_generate \
--config='polyphony' \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1/ \
--output_dir=/content/mydrive/MAIS202/Project/polyphony/run1/output/pkmncenter-bw \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--num_outputs=5 \
--num_steps=240 \
--primer_midi=/content/mydrive/MAIS202/Project/data/primer_pkmncenter_bw.mid \
--condition_on_primer=true \
--inject_primer_during_generation=false

#victoryroad
!polyphony_rnn_generate \
--config='polyphony' \
--run_dir=/content/mydrive/MAIS202/Project/polyphony/run1/ \
--output_dir=/content/mydrive/MAIS202/Project/polyphony/run1/output/victoryroad-rse \
--hparams="batch_size=64,rnn_layer_sizes=[256,256,256]" \
--num_outputs=5 \
--num_steps=240 \
--primer_midi=/content/mydrive/MAIS202/Project/data/primer_victoryroad_rse.mid \
--condition_on_primer=true \
--inject_primer_during_generation=false

#generate new sequences with the train model (budle_file)
!polyphony_rnn_generate \
--config='polyphony_rnn ' \
--bundle_file=/content/drive/My\ Drive/RNN/models/polyphony/run1/my_poly_rnn.mag \
--output_dir=/content/drive/My\ Drive/creacionesAI/poly_train3 \
--num_outputs=10 \
--num_steps=200 \
--primer_midi=/content/drive/My\ Drive/brain_music/happy_1.mid \
--condition_on_primer=True \
--inject_primer_during_generation=False